# Generated by YCM Generator at 2016-06-04 17:05:04.138332

# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import ycm_core

flags = [
    '-x',
    'c++',
    '-DCVAPI_EXPORTS',
    '-DHAVE_WEBP',
    '-DHIGHGUI_EXPORTS',
    '-DIMGCODECS_EXPORTS',
    '-DNDEBUG',
    '-DVIDEOIO_EXPORTS',
    '-D__OPENCV_BUILD=1',
    '-I/home/huangzh/Github/opencv/3rdparty/include/opencl/1.2',
    '-I/home/huangzh/Github/opencv/3rdparty/ippicv/unpack/ippicv_lnx/include',
    '-I/home/huangzh/Github/opencv/3rdparty/libwebp',
    '-I/home/huangzh/Github/opencv/apps/annotation',
    '-I/home/huangzh/Github/opencv/apps/annotation/PRIVATE',
    '-I/home/huangzh/Github/opencv/apps/createsamples',
    '-I/home/huangzh/Github/opencv/apps/createsamples/PRIVATE',
    '-I/home/huangzh/Github/opencv/apps/traincascade',
    '-I/home/huangzh/Github/opencv/apps/traincascade/PRIVATE',
    '-I/home/huangzh/Github/opencv/apps/visualisation',
    '-I/home/huangzh/Github/opencv/apps/visualisation/PRIVATE',
    '-I/home/huangzh/Github/opencv/include/opencv',
    '-I/home/huangzh/Github/opencv/modules/calib3d/include',
    '-I/home/huangzh/Github/opencv/modules/calib3d/perf',
    '-I/home/huangzh/Github/opencv/modules/calib3d/src',
    '-I/home/huangzh/Github/opencv/modules/calib3d/test',
    '-I/home/huangzh/Github/opencv/modules/core/include',
    '-I/home/huangzh/Github/opencv/modules/core/perf',
    '-I/home/huangzh/Github/opencv/modules/core/src',
    '-I/home/huangzh/Github/opencv/modules/core/test',
    '-I/home/huangzh/Github/opencv/modules/features2d/include',
    '-I/home/huangzh/Github/opencv/modules/features2d/perf',
    '-I/home/huangzh/Github/opencv/modules/features2d/src',
    '-I/home/huangzh/Github/opencv/modules/features2d/test',
    '-I/home/huangzh/Github/opencv/modules/flann/include',
    '-I/home/huangzh/Github/opencv/modules/flann/src',
    '-I/home/huangzh/Github/opencv/modules/flann/test',
    '-I/home/huangzh/Github/opencv/modules/highgui/include',
    '-I/home/huangzh/Github/opencv/modules/highgui/src',
    '-I/home/huangzh/Github/opencv/modules/highgui/test',
    '-I/home/huangzh/Github/opencv/modules/imgcodecs/include',
    '-I/home/huangzh/Github/opencv/modules/imgcodecs/perf',
    '-I/home/huangzh/Github/opencv/modules/imgcodecs/src',
    '-I/home/huangzh/Github/opencv/modules/imgcodecs/test',
    '-I/home/huangzh/Github/opencv/modules/imgproc/include',
    '-I/home/huangzh/Github/opencv/modules/imgproc/perf',
    '-I/home/huangzh/Github/opencv/modules/imgproc/src',
    '-I/home/huangzh/Github/opencv/modules/imgproc/test',
    '-I/home/huangzh/Github/opencv/modules/ml/include',
    '-I/home/huangzh/Github/opencv/modules/ml/src',
    '-I/home/huangzh/Github/opencv/modules/ml/test',
    '-I/home/huangzh/Github/opencv/modules/objdetect/include',
    '-I/home/huangzh/Github/opencv/modules/objdetect/perf',
    '-I/home/huangzh/Github/opencv/modules/objdetect/src',
    '-I/home/huangzh/Github/opencv/modules/objdetect/test',
    '-I/home/huangzh/Github/opencv/modules/photo/include',
    '-I/home/huangzh/Github/opencv/modules/photo/perf',
    '-I/home/huangzh/Github/opencv/modules/photo/src',
    '-I/home/huangzh/Github/opencv/modules/photo/test',
    '-I/home/huangzh/Github/opencv/modules/shape/include',
    '-I/home/huangzh/Github/opencv/modules/shape/src',
    '-I/home/huangzh/Github/opencv/modules/shape/test',
    '-I/home/huangzh/Github/opencv/modules/stitching/include',
    '-I/home/huangzh/Github/opencv/modules/stitching/perf',
    '-I/home/huangzh/Github/opencv/modules/stitching/src',
    '-I/home/huangzh/Github/opencv/modules/stitching/test',
    '-I/home/huangzh/Github/opencv/modules/superres/include',
    '-I/home/huangzh/Github/opencv/modules/superres/perf',
    '-I/home/huangzh/Github/opencv/modules/superres/src',
    '-I/home/huangzh/Github/opencv/modules/superres/test',
    '-I/home/huangzh/Github/opencv/modules/ts/include',
    '-I/home/huangzh/Github/opencv/modules/ts/src',
    '-I/home/huangzh/Github/opencv/modules/video/include',
    '-I/home/huangzh/Github/opencv/modules/video/perf',
    '-I/home/huangzh/Github/opencv/modules/video/src',
    '-I/home/huangzh/Github/opencv/modules/video/test',
    '-I/home/huangzh/Github/opencv/modules/videoio/include',
    '-I/home/huangzh/Github/opencv/modules/videoio/perf',
    '-I/home/huangzh/Github/opencv/modules/videoio/src',
    '-I/home/huangzh/Github/opencv/modules/videoio/test',
    '-I/home/huangzh/Github/opencv/modules/videostab/include',
    '-I/home/huangzh/Github/opencv/modules/videostab/src',
    '-I/tmp/tmpeqiZbI',
    '-I/tmp/tmpeqiZbI/modules/calib3d',
    '-I/tmp/tmpeqiZbI/modules/core',
    '-I/tmp/tmpeqiZbI/modules/features2d',
    '-I/tmp/tmpeqiZbI/modules/flann',
    '-I/tmp/tmpeqiZbI/modules/highgui',
    '-I/tmp/tmpeqiZbI/modules/imgcodecs',
    '-I/tmp/tmpeqiZbI/modules/imgproc',
    '-I/tmp/tmpeqiZbI/modules/ml',
    '-I/tmp/tmpeqiZbI/modules/objdetect',
    '-I/tmp/tmpeqiZbI/modules/photo',
    '-I/tmp/tmpeqiZbI/modules/shape',
    '-I/tmp/tmpeqiZbI/modules/stitching',
    '-I/tmp/tmpeqiZbI/modules/superres',
    '-I/tmp/tmpeqiZbI/modules/ts',
    '-I/tmp/tmpeqiZbI/modules/video',
    '-I/tmp/tmpeqiZbI/modules/videoio',
    '-I/tmp/tmpeqiZbI/modules/videostab',
    '-W',
    '-Werror=address',
    '-Werror=format-security',
    '-Werror=non-virtual-dtor',
    '-Werror=return-type',
    '-Werror=sequence-point',
    '-Wformat',
    '-Winit-self',
    '-Wmissing-declarations',
    '-Wmissing-prototypes',
    '-Wno-delete-non-virtual-dtor',
    '-Wno-deprecated-declarations',
    '-Wno-long-long',
    '-Wno-narrowing',
    '-Wno-shadow',
    '-Wno-undef',
    '-Wno-unnamed-type-template-args',
    '-Wpointer-arith',
    '-Wshadow',
    '-Wsign-promo',
    '-Wstrict-prototypes',
    '-Wundef',
    '-isystem', '/usr/include/OpenEXR',
    '-isystem', '/usr/include/at-spi-2.0',
    '-isystem', '/usr/include/at-spi2-atk/2.0',
    '-isystem', '/usr/include/atk-1.0',
    '-isystem', '/usr/include/cairo',
    '-isystem', '/usr/include/dbus-1.0',
    '-isystem', '/usr/include/freetype2',
    '-isystem', '/usr/include/gdk-pixbuf-2.0',
    '-isystem', '/usr/include/gio-unix-2.0',
    '-isystem', '/usr/include/glib-2.0',
    '-isystem', '/usr/include/gtk-3.0',
    '-isystem', '/usr/include/harfbuzz',
    '-isystem', '/usr/include/libpng12',
    '-isystem', '/usr/include/mirclient',
    '-isystem', '/usr/include/mircommon',
    '-isystem', '/usr/include/mircookie',
    '-isystem', '/usr/include/pango-1.0',
    '-isystem', '/usr/include/pixman-1',
    '-isystem', '/usr/include/x86_64-linux-gnu',
    '-isystem', '/usr/lib/x86_64-linux-gnu/dbus-1.0/include',
    '-isystem', '/usr/lib/x86_64-linux-gnu/glib-2.0/include',
]


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = ''

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }

